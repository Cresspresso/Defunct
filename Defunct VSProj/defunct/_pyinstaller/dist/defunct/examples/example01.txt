// Single Line Comment
/*
Multiline
Comment
*/

// The 'def' keyword creates a definition which can be referenced by name (like 'add' or 'identity').
// The body is simplified upon definition, unless the keyword is 'def_u' instead of 'def'.
// When another definition is simplified, if it contains a reference to a previous definition,
// the previous definition is copied and inserted where the reference was, and then it is simplified.


/// Basics

def identity [x.x]   // returns its parameter
def true  [y x. y]   // takes 2 parameters, returns first parameter
def false [y x. x]   // takes 2 parameters, returns second parameter


/// Church Numeral Operators

// successor function
def ++  [w. [y x. y(w y x)]]  // takes church numeral (n), returns (n+1)
def add [x y. y ++ x]		  // add:      returns (x+y)
def mul [x y. [z.x(y z)]]	  // multiply: returns (x*y)


/// some Church Numerals

def 0 false
def 1 (++ 0)
def 2 (++ 1)
def 3 (++ 2)
def 4 (++ 3)
def 5 (++ 4)
def 6 (++ 5)
def 7 (++ 6)
def 8 (++ 7)
def 9 (++ 8)
def 10 (++ 9)
def 11 (++ 10)
def 12 (++ 11)


/// Pairs

def pair	[a b. [z. z a b]]   // takes 2 parameters, returns a pair (first,second)
def pair_first	[p. p true]     // takes a pair (first,second), returns first
def pair_second	[p. p false]    // takes a pair (first,second), returns second

// takes a pair (a,b), returns pair (a+1,a)
def phi [p. [z. z (++ (pair_first p)) (pair_first p)]]


/// more Church Numeral Operators

// predecessor function
// note that in church numerals, (-- 0) == 0
def --  [n. n phi [z.z 0 0] false]  // takes church numeral (n), returns (n-1)
def sub [x y. y -- x]				// subtract: returns (x-y)


/// Logical Operators

def and [x y. x y false]
def or  [x y. x true y]
def not [x. x false true]


/// Church Numeral Comparisons

def		  eq0 [x. x false not false]
def_u ==0 eq0
// The 'def_u' keyword indicates this definition should remain unsimplified.
// When the definition is called, the unsimplified body is copied and then simplified.
// This saves memory, and is useful for aliases (definitions consisting of just one reference to another definition)

def		 ge	[x y. eq0 (x -- y)]
def_u >= ge
def		 eq	[x y. and (ge x y) (ge y x)]
def_u == eq
def		 ne	[x y. not (eq x y)]
def_u != ne
def		 gt	[x y. and (ge x y) (not (eq x y))]
def_u >  gt
def		 lt	[x y. not (ge x y)]
def_u <  lt
def		 le	[x y. or (lt x y) (eq x y)]
def_u <= le


/// Recursion

def Y [y.[$q.y(q q)][$q.y(q q)]]
// Including '$' in front of a function argument name indicates that function is recursive.
// Recursive functions are only simplified when their parameter is not recursive.

def R [r.[n. eq0 n 0 (n ++ (r (-- n)))]]
def sum1toN [$n. Y R n]
// The 'sum1toN' definition is a wrapper of a recursive function,
// so we must specify $n to indicate it should not be simplified until a non-recursive parameter is passed in.


/// Printing

// The 'do' keyword executes any commands in its parameter, such as 'print'.
// The 'print' function displays a string representation of its parameter, along with any fully simplified aliases.
do (
print (3)     // prints '3 :  [y x. y(y(y x))]'
print (++)    // prints '++ :  [w y x. y(w y x)]'
)
// Note that 'print' returns the identity function, so the next print statement is also executed.

// apply the recursive function to the non-recursive parameter '3'
// 3 + 2 + 1 + 0 = 6
do (print (Y R 3))
do (print (sum1toN 3))


